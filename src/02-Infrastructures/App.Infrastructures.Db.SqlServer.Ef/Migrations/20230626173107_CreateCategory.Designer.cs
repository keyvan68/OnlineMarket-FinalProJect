// <auto-generated />
using System;
using App.Infrastructures.Db.SqlServer.Ef.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructures.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230626173107_CreateCategory")]
    partial class CreateCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.Domain.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeactiveProduct")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HighestBid")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BuyerId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdayte")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(164),
                            IsDeleted = false,
                            Name = "گوشی موبایل و تبلت"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(181),
                            IsDeleted = false,
                            Name = "لپ تاپ و کامپیوتر"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(184),
                            IsDeleted = false,
                            Name = "لوازم خانگی"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(186),
                            IsDeleted = false,
                            Name = "زیبایی و سلامت"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(190),
                            IsDeleted = false,
                            Name = "ورزش و سرگرمی"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(191),
                            IsDeleted = false,
                            Name = "خودرو و لوازم"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(194),
                            IsDeleted = false,
                            Name = "فرهنگ و هنر"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(196),
                            IsDeleted = false,
                            Name = "ابزار"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(198),
                            IsDeleted = false,
                            Name = "ساختمان و فضای عمومی"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(200),
                            IsDeleted = false,
                            Name = "مادر و کودک"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(273),
                            IsDeleted = false,
                            Name = "مد و پوشاک"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(275),
                            IsDeleted = false,
                            Name = "خوراکی ها"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(278),
                            IsDeleted = false,
                            Name = "پت شاپ"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(280),
                            IsDeleted = false,
                            Name = "گوشی موبایل",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(282),
                            IsDeleted = false,
                            Name = "تبلت",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(283),
                            IsDeleted = false,
                            Name = "هدست و هدفون",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(285),
                            IsDeleted = false,
                            Name = "سیم کارت",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(289),
                            IsDeleted = false,
                            Name = "لپ تاپ",
                            ParentId = 5
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(291),
                            IsDeleted = false,
                            Name = "کامپیوتر ",
                            ParentId = 5
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(293),
                            IsDeleted = false,
                            Name = "تجهیزات شبکه",
                            ParentId = 5
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(295),
                            IsDeleted = false,
                            Name = "تجهیزات اداری",
                            ParentId = 5
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(297),
                            IsDeleted = false,
                            Name = "لوازم جانبی لپ تاپ و کامپیوتر",
                            ParentId = 5
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(300),
                            IsDeleted = false,
                            Name = "دوربین",
                            ParentId = 6
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(302),
                            IsDeleted = false,
                            Name = "تهویه سرمایش و گرمایش",
                            ParentId = 6
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(304),
                            IsDeleted = false,
                            Name = "لوازم جانبی لوازم خانگی",
                            ParentId = 6
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(305),
                            IsDeleted = false,
                            Name = "صوتی و تصویری",
                            ParentId = 6
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(307),
                            IsDeleted = false,
                            Name = "تجهیزات پزشکی",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(309),
                            IsDeleted = false,
                            Name = "ارایشو زیبایی",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(311),
                            IsDeleted = false,
                            Name = "لوازم شخصی",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(313),
                            IsDeleted = false,
                            Name = "عطر و ادکلن",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(315),
                            IsDeleted = false,
                            Name = "محصولات طبی",
                            ParentId = 7
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(317),
                            IsDeleted = false,
                            Name = "وسایل ورزشی",
                            ParentId = 8
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(319),
                            IsDeleted = false,
                            Name = "اسباب بازی",
                            ParentId = 8
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(321),
                            IsDeleted = false,
                            Name = "تجهیزات سفر",
                            ParentId = 8
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(323),
                            IsDeleted = false,
                            Name = "سرگرمی",
                            ParentId = 8
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(325),
                            IsDeleted = false,
                            Name = "خودرو",
                            ParentId = 9
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(328),
                            IsDeleted = false,
                            Name = "بدنه خودرو",
                            ParentId = 9
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(330),
                            IsDeleted = false,
                            Name = "الکترونیک خودرو",
                            ParentId = 9
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(332),
                            IsDeleted = false,
                            Name = "موتور سیکلت",
                            ParentId = 9
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(334),
                            IsDeleted = false,
                            Name = "لوازم موتور سیکلت",
                            ParentId = 9
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(336),
                            IsDeleted = false,
                            Name = "کتاب و مجلات",
                            ParentId = 10
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(338),
                            IsDeleted = false,
                            Name = "رسانه های صوتی وتصویری",
                            ParentId = 10
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(340),
                            IsDeleted = false,
                            Name = "نرم افزار",
                            ParentId = 10
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(341),
                            IsDeleted = false,
                            Name = "ادوات موسیقی",
                            ParentId = 10
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(344),
                            IsDeleted = false,
                            Name = "اشیا قدیمی وکلکسیونی",
                            ParentId = 10
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(345),
                            IsDeleted = false,
                            Name = "ابزار دستی",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(347),
                            IsDeleted = false,
                            Name = "ابزار و تجهیزات باغبانی",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(349),
                            IsDeleted = false,
                            Name = "ابزار برقی",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(351),
                            IsDeleted = false,
                            Name = "ابزار لوله کشی",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(353),
                            IsDeleted = false,
                            Name = "ابزار نجاری",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(354),
                            IsDeleted = false,
                            Name = "ابزار خراطی",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(357),
                            IsDeleted = false,
                            Name = "تجهیزات ازمایشگاهی",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(359),
                            IsDeleted = false,
                            Name = "تجهیزات الکترونیک",
                            ParentId = 11
                        },
                        new
                        {
                            Id = 57,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(361),
                            IsDeleted = false,
                            Name = "شیرالات ساختمانی",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 58,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(409),
                            IsDeleted = false,
                            Name = "تجهیزات اشپز خانه",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 59,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(412),
                            IsDeleted = false,
                            Name = "دکوراسیون فضای عمومی",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 60,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(414),
                            IsDeleted = false,
                            Name = "منابع و مخازن",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 61,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(416),
                            IsDeleted = false,
                            Name = "لوازم گردش و سفر نوزاد",
                            ParentId = 13
                        },
                        new
                        {
                            Id = 62,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(418),
                            IsDeleted = false,
                            Name = "بهداشت و حمام نوزاد",
                            ParentId = 13
                        },
                        new
                        {
                            Id = 63,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(420),
                            IsDeleted = false,
                            Name = "وسایل خواب نوزاد",
                            ParentId = 13
                        },
                        new
                        {
                            Id = 64,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(422),
                            IsDeleted = false,
                            Name = "لباس کودک و نوزاد",
                            ParentId = 13
                        },
                        new
                        {
                            Id = 65,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(424),
                            IsDeleted = false,
                            Name = "سرگرمی و اموزش کودک",
                            ParentId = 13
                        },
                        new
                        {
                            Id = 66,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(426),
                            IsDeleted = false,
                            Name = "پوشاک مردانه",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 67,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(427),
                            IsDeleted = false,
                            Name = "پوشاک زنانه",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 68,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(429),
                            IsDeleted = false,
                            Name = "زیورالات",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 69,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(431),
                            IsDeleted = false,
                            Name = "کیف و کفش",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 70,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(434),
                            IsDeleted = false,
                            Name = "ست هدیه",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 71,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(436),
                            IsDeleted = false,
                            Name = "کمربند و بند شلوار",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 72,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(439),
                            IsDeleted = false,
                            Name = "میوه و سبزیجات",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 73,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(441),
                            IsDeleted = false,
                            Name = "اجیلو خشکبار",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 74,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(443),
                            IsDeleted = false,
                            Name = "غلات و حبوبات",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 75,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(444),
                            IsDeleted = false,
                            Name = "قنادی",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 76,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(446),
                            IsDeleted = false,
                            Name = "سوپر مارکت",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 77,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(448),
                            IsDeleted = false,
                            Name = "گیاهان دارویی",
                            ParentId = 15
                        },
                        new
                        {
                            Id = 78,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(450),
                            IsDeleted = false,
                            Name = "درمان و سلامت حیوانات",
                            ParentId = 16
                        },
                        new
                        {
                            Id = 79,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(451),
                            IsDeleted = false,
                            Name = "پوشاک حیوانات",
                            ParentId = 16
                        },
                        new
                        {
                            Id = 80,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(454),
                            IsDeleted = false,
                            Name = "لوازم بهداشتی حیوانات",
                            ParentId = 16
                        },
                        new
                        {
                            Id = 81,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(456),
                            IsDeleted = false,
                            Name = "لوازم نگهداری و بازی حیوانات",
                            ParentId = 16
                        },
                        new
                        {
                            Id = 82,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(457),
                            IsDeleted = false,
                            Name = "غذای حیوانات",
                            ParentId = 16
                        },
                        new
                        {
                            Id = 83,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(459),
                            IsDeleted = false,
                            Name = "وسایل اموزشی حیوانات",
                            ParentId = 16
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(4209),
                            Description = "This is a comment",
                            InvoiceId = 1,
                            IsAccepted = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(4217),
                            Description = "This is a comment1",
                            InvoiceId = 2,
                            IsAccepted = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(4219),
                            Description = "This is a comment2",
                            InvoiceId = 3,
                            IsAccepted = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int?>("Commision")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Final")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(9754),
                            Final = false,
                            IsDeleted = false,
                            Quantity = 0,
                            SellerId = 1,
                            TotalAmount = 0
                        },
                        new
                        {
                            Id = 2,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(9761),
                            Final = false,
                            IsDeleted = false,
                            Quantity = 0,
                            SellerId = 1,
                            TotalAmount = 0
                        },
                        new
                        {
                            Id = 3,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 79, DateTimeKind.Local).AddTicks(9764),
                            Final = false,
                            IsDeleted = false,
                            Quantity = 0,
                            SellerId = 1,
                            TotalAmount = 0
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.InvoiceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InvoiceId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            InvoiceId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            InvoiceId = 3,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Auction")
                        .HasColumnType("bit");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberofProducts")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StallId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StallId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Auction = false,
                            BuyerId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 80, DateTimeKind.Local).AddTicks(6725),
                            Description = "Product Description1",
                            IsAccepted = false,
                            IsActive = false,
                            IsDeleted = false,
                            NumberofProducts = 5,
                            Price = 10000,
                            StallId = 1,
                            Title = "Product Title1"
                        },
                        new
                        {
                            Id = 2,
                            Auction = false,
                            BuyerId = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 80, DateTimeKind.Local).AddTicks(6733),
                            Description = "Product Description2",
                            IsAccepted = false,
                            IsActive = false,
                            IsDeleted = false,
                            NumberofProducts = 5,
                            Price = 10000,
                            StallId = 1,
                            Title = "Product Title2"
                        },
                        new
                        {
                            Id = 3,
                            Auction = false,
                            BuyerId = 1,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2023, 6, 26, 21, 1, 6, 80, DateTimeKind.Local).AddTicks(6736),
                            Description = "Product Description3",
                            IsAccepted = false,
                            IsActive = false,
                            IsDeleted = false,
                            NumberofProducts = 5,
                            Price = 10000,
                            StallId = 1,
                            Title = "Product Title3"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommissionAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Medal")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Stall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Stalls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Stall1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auction", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Product", "Product")
                        .WithMany("Auctions")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Auctions_Products");

                    b.HasOne("App.Domain.Core.Entities.Seller", "Seller")
                        .WithMany("Auctions")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Auction_Seller");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Bid", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Bids_Auction");

                    b.HasOne("App.Domain.Core.Entities.Buyer", "Buyer")
                        .WithMany("Bids")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Bids_Buyers");

                    b.Navigation("Auction");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Buyer", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Buyer")
                        .HasForeignKey("App.Domain.Core.Entities.Buyer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Category", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Category", "Parent")
                        .WithMany("InverseParen")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Buyer", "Buyer")
                        .WithMany("Comments")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Buyers");

                    b.HasOne("App.Domain.Core.Entities.Invoice", "Invoice")
                        .WithMany("Comments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Products");

                    b.Navigation("Buyer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Image", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Images_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Invoice", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Buyer", "Buyer")
                        .WithMany("Invoices")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Buyers");

                    b.HasOne("App.Domain.Core.Entities.Seller", "Seller")
                        .WithMany("Invoices")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Seller");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.InvoiceProduct", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceProduct_Invoice");

                    b.HasOne("App.Domain.Core.Entities.Product", "Product")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceProduct_Products");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Product", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Category");

                    b.HasOne("App.Domain.Core.Entities.Stall", "Stall")
                        .WithMany("Products")
                        .HasForeignKey("StallId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Stalls");

                    b.Navigation("Category");

                    b.Navigation("Stall");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Seller", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Seller")
                        .HasForeignKey("App.Domain.Core.Entities.Seller", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Stall", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Seller", "IdNavigation")
                        .WithOne("Stall")
                        .HasForeignKey("App.Domain.Core.Entities.Stall", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Stores_Sellers");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Auction", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Buyer", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Comments");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Category", b =>
                {
                    b.Navigation("InverseParen");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Invoice", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InvoiceProducts");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Product", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Images");

                    b.Navigation("InvoiceProducts");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Seller", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Invoices");

                    b.Navigation("Stall");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Stall", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
